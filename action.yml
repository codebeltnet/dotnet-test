name: .NET Test from Codebelt
description: An opinionated action that utilizes the test runner in the .NET SDK.
inputs:
  projects:
    description: Optional path to the project(s) file to test. Supports globbing. Default is an empty string.
    required: true
    default: ''
  configuration:
    description: Defines the build configuration. Default is Release (to reduce risk of surprises when transitioning to Production).
    required: true
    default: 'Release'
  verbosity-level:
    description: Sets the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]. The default is quiet.
    required: true
    default: 'quiet'
  test-results-folder-name:
    description: The name of the folder where the test results will be written. Default is TestResults.
    required: false
    default: 'TestResults'
  build-switches:
    description: Provides a way to fully customize the build. Default is emopty. See https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2022#switches for more information.
    required: false
    default: ''
  blame-hang-timeout:
    description: The time to wait for a test to complete before collecting a dump. Default is 10 minutes.
    required: false
    default: '10m'
  blame-hang-dump-type:
    description: The type of dump to collect when a test hangs. Default is mini.
    required: false
    default: 'mini'
  build:
    description: Whether to build the project(s) before testing. Default is false.
    required: false
    default: 'false'
  restore:
    description: Whether to restore the project(s) before testing. Default is false.
    required: false
    default: 'false'
  test-arguments:
    description: Additional arguments to pass to the test runner. Default is empty.
    required: false
    default: ''
runs:
  using: composite
  steps:
    - name: Test
      run: |
        build-restore-args=""
        if [[ "${{ inputs.build }}" == "false" && "${{ inputs.restore }}" == "false" ]]; then
          build-restore-args="--no-build"
        elif [[ "${{ inputs.build }}" == "true" && "${{ inputs.restore }}" == "false" ]]; then
          build-restore-args="--no-restore"
        fi

        if [ "${{ inputs.projects }}" == "" ]; then
            dotnet test $build-restore-args --configuration ${{ inputs.configuration }} --verbosity ${{ inputs.verbosity-level }} --logger trx --results-directory $RUNNER_TEMP/${{ inputs.test-results-folder-name }} --collect:"XPlat Code Coverage;Format=opencover" --blame-hang-timeout ${{ inputs.blame-hang-timeout }} --blame-hang-dump-type ${{ inputs.blame-hang-dump-type }} -p:CoverletOutputFormat=opencover -p:UseSourceLink=true ${{ inputs.test-arguments }}
        else
            shopt -s globstar extglob
            for file in ${{ inputs.projects }}; do
              dotnet test $file $build-restore-args --configuration ${{ inputs.configuration }} --verbosity ${{ inputs.verbosity-level }} --logger trx --results-directory $RUNNER_TEMP/${{ inputs.test-results-folder-name }} --collect:"XPlat Code Coverage;Format=opencover" --blame-hang-timeout ${{ inputs.blame-hang-timeout }} --blame-hang-dump-type ${{ inputs.blame-hang-dump-type }} -p:CoverletOutputFormat=opencover -p:UseSourceLink=true ${{ inputs.test-arguments }}
              echo "Tested and written results for '$file'"
            done
        fi
      shell: bash
branding:
  icon: 'umbrella'
  color: 'blue'
